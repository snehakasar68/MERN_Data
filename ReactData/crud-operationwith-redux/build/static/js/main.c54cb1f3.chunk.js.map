{"version":3,"sources":["logo.svg","App.js","Redux/action.js","serviceWorker.js","Redux/reducer.js","index.js"],"names":["module","exports","App","props","submitData","state","employeeName","employeeDepartment","id","newEmployee","employees","length","addEmployee","updatedDetails","editEmployee","alert","clearData","editDetails","data","setState","deleteEmployee","window","confirm","handleNameChange","e","target","value","handleDepartmentChange","this","getEmployee","className","type","onChange","placeholder","onClick","Button","variant","color","size","startIcon","map","index","key","Component","connect","dispatch","payload","employeeId","Boolean","location","hostname","match","initialstate","reducer","action","concat","content","i","filter","item","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c54cb1f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";  \nimport logo from \"./logo.svg\";  \nimport \"./App.css\";  \nimport PropTypes from 'prop-types';  \nimport { getEmployee, addEmployee, editEmployee, deleteEmployee } from './Redux/action';  \nimport { connect } from 'react-redux';  \nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from '@material-ui/icons/Save';\nclass App extends Component {  \n  constructor(props) {  \n    super(props);  \n    this.state = {  \n      id: 0,  \n      employeeName: \"\",  \n      employeeDepartment: \"\"  \n    };  \n  }  \n  \n  /* static propTypes = {  \n    employees: PropTypes.array.isRequired,  \n    getEmployee: PropTypes.func.isRequired,  \n    addEmployee: PropTypes.func.isRequired,  \n    editEmployee: PropTypes.func.isRequired,  \n    deleteEmployee: PropTypes.func.isRequired  \n  }; */  \n  \n  componentDidMount() {  \n    this.props.getEmployee();  \n  }  \n  \n  submitData = () => {  \n    if (this.state.employeeName && this.state.employeeDepartment && !this.state.id) {  \n      const newEmployee = {  \n        //id: Math.floor(Math.random() * (999 - 100 + 1) + 100),  \n       id: this.props.employees.length+1,\n        employeeName: this.state.employeeName,  \n        employeeDepartment: this.state.employeeDepartment,  \n      };  \n  \n      this.props.addEmployee(newEmployee);  \n    } else if (this.state.employeeName && this.state.employeeDepartment && this.state.id) {  \n      const updatedDetails = {  \n        id: this.state.id,  \n        employeeName: this.state.employeeName,  \n        employeeDepartment: this.state.employeeDepartment,  \n      };  \n  \n      this.props.editEmployee(updatedDetails);  \n    } else {  \n      alert('Enter Employee Details.');  \n    }  \n  \n    this.clearData();  \n  }  \n  \n  editDetails = (data) => {  \n    this.setState({  \n      id: data.id,  \n      employeeName: data.employeeName,  \n      employeeDepartment: data.employeeDepartment  \n    })  \n  }  \n  \n  deleteEmployee = (id) => {  \n    this.clearData();  \n    if (window.confirm(\"Are you sure?\")) {  \n      this.props.deleteEmployee(id);  \n    }  \n  }  \n  \n  handleNameChange = (e) => {  \n    this.setState({  \n      employeeName: e.target.value  \n    });  \n  }  \n  \n  handleDepartmentChange = (e) => {  \n    this.setState({  \n      employeeDepartment: e.target.value  \n    });  \n  }  \n  \n  clearData = () => {  \n    this.setState({  \n      id: 0,  \n      employeeName: \"\",  \n      employeeDepartment: \"\"  \n    });  \n  }  \n  \n  render() {  \n    return (  \n      <div className=\"App\">  \n       <h1 className=\"App-title\">CRUD opeartions Using Redux</h1>  \n        <p className=\"App-intro\">  \n          <div className=\"leftsection\">  \n            Employee Name : <input type=\"text\"  onChange={this.handleNameChange} value={this.state.employeeName}  placeholder=\"Employee Name\" /> <br />  \n            Employee Department :  <input  type=\"text\" onChange={this.handleDepartmentChange} value={this.state.employeeDepartment} placeholder=\"Employee Department\" /><br />  \n            {this.state.id ? <button className=\"btn btn-success\" onClick={this.submitData}>UPDATE</button> :   <Button\n       onClick={this.submitData}\n       variant=\"contained\"\n        color=\"primary\"\n        size=\"small\"\n       \n        startIcon={<SaveIcon />}\n      >\n        Save\n      </Button>}   <button  onClick={this.clearData}>CLEAR</button>  \n          </div>  \n          <div className=\"rightsection\">  \n            <table>  \n              <thead>  \n                <tr>  \n                  <th>ID</th>  \n                  <th>Name</th>  \n                  <th>Depatment Name</th>  \n                  <th>Action(s)</th>  \n                </tr>  \n              </thead>  \n              <tbody>  \n                {this.props.employees && this.props.employees.map((data, index) => {  \n                  return <tr key={(data.id )}>  \n                    <td>{(data.id)}</td>  \n                    <td>{data.employeeName}</td>  \n                    <td>{data.employeeDepartment}</td>  \n                    <td><button className=\"btn btn-success\" onClick={() => this.editDetails(data)}>EDIT</button> <button className=\"btn btn-danger\" onClick={() => this.deleteEmployee(data.id)}> <DeleteForeverIcon /></button> <Button onClick={() => this.deleteEmployee(data.id)}\n        variant=\"contained\"\n        color=\"secondary\"\n         startIcon={ <DeleteForeverIcon />}\n      >\n        Delete\n      </Button>  </td>  \n                  </tr>  \n                })}  \n              </tbody>  \n            </table>  \n          </div>  \n        </p>  \n      </div>  \n    );  \n  }  \n}  \n  \nconst mapStateToProps = state => ({  \n  employees: state.employees  \n});  \n  \nexport default connect(mapStateToProps, { getEmployee, addEmployee, editEmployee, deleteEmployee })(App); \n\n\n{/* <button className=\"btn btn-primary\" onClick={this.submitData}>ADD</button> */}","export function getEmployee() {  \r\n    return dispatch => {  \r\n        return dispatch({  \r\n            type: 'GET_EMPLOYEE'  \r\n        });  \r\n    }  \r\n};  \r\n  \r\nexport function addEmployee(data) {  \r\n    return dispatch => {  \r\n        return dispatch({  \r\n            type: 'ADD_EMPLOYEE',  \r\n            payload: data  \r\n        });  \r\n    }  \r\n};  \r\n  \r\nexport function editEmployee(data) {  \r\n    return dispatch => {  \r\n        return dispatch({  \r\n            type: 'EDIT_EMPLOYEE',  \r\n            payload: data  \r\n        });  \r\n    }  \r\n};  \r\n  \r\nexport function deleteEmployee(employeeId) {  \r\n    return dispatch => {  \r\n        return dispatch({  \r\n            type: 'DELETE_EMPLOYEE',  \r\n            payload: employeeId  \r\n        });  \r\n    }  \r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialstate = {    \r\n    employees: [    \r\n        { id: 1, employeeName: \"jay\", employeeDepartment: \".NET Team\" },    \r\n        { id: 2, employeeName: \"ram\", employeeDepartment: \"Mobile Team\" },    \r\n        { id: 3, employeeName: \"sara\", employeeDepartment: \"Design Team\" }    \r\n    ]    \r\n};    \r\n    \r\nconst reducer = (state = initialstate, action) => {    \r\n    switch (action.type) {    \r\n        case 'GET_EMPLOYEE':    \r\n            return {    \r\n                ...state    \r\n            };    \r\n        case 'ADD_EMPLOYEE':    \r\n            return {    \r\n                ...state,    \r\n                employees: state.employees.concat(action.payload)    \r\n            };    \r\n        case 'EDIT_EMPLOYEE':    \r\n            return {    \r\n                ...state,    \r\n                employees: state.employees.map(    \r\n                    (content, i) => content.id === action.payload.id ? {...content, employeeName : action.payload.employeeName ,  employeeDepartment : action.payload.employeeDepartment }    \r\n                                            : content)    \r\n            };    \r\n        case 'DELETE_EMPLOYEE':    \r\n            return {    \r\n                ...state,    \r\n                employees: state.employees.filter(item => item.id !== action.payload)    \r\n            };    \r\n        default:    \r\n            return state;    \r\n    }    \r\n};    \r\n    \r\nexport default reducer; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';  \nimport { createStore, applyMiddleware } from 'redux';  \nimport thunk from \"redux-thunk\"\nimport reducer from './Redux/reducer';  \n  \nconst store = createStore(reducer, applyMiddleware(thunk));  \n\nReactDOM.render(  \n    <Provider store={store}>  \n        <App />  \n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}